{"version":3,"file":"static/js/564.62b62dfe.chunk.js","mappings":"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","sources":["utils/bindUtils.ts","components/HallOfFame/Dialogues/DialogBindContent.tsx","services/bindSuggestionsManagingService.ts","components/HallOfFame/Dialogues/AddNewBindSuggestionDalog.tsx","components/HallOfFame/HallOfFameSuggestions.tsx","services/bindsManagingService.ts","models/bindsModels.ts","webpack://kether.pl/./src/components/PageLayout/PageBackground/PageWithBackground.module.css?73d0","components/PageLayout/PageBackground/PageWithBackground.tsx","components/PageLayout/PageBackground/backgrounds.ts"],"sourcesContent":["import { BindEntry, BindSuggestionEntry } from \"../models/bindsModels\";\n\nexport const trimBindAuthor = (bind: BindEntry | BindSuggestionEntry) => {\n    return {\n        ...bind,\n        author: bind.author.replace(':', '').trim(),\n    };\n};\nexport const bindUtils = {\n    replaceNonEnglishLatinChars: (text: string): string => {\n        const mapping: { [key: string]: string } = {\n            // English equivalents\n            À: 'A',\n            Á: 'A',\n            Â: 'A',\n            Ã: 'A',\n            Ä: 'A',\n            Å: 'A',\n            Ç: 'C',\n            È: 'E',\n            É: 'E',\n            Ê: 'E',\n            Ë: 'E',\n            Ì: 'I',\n            Í: 'I',\n            Î: 'I',\n            Ï: 'I',\n            Ñ: 'N',\n            Ò: 'O',\n            Ô: 'O',\n            Õ: 'O',\n            Ö: 'O',\n            O̧: 'O',\n            Ù: 'U',\n            Ú: 'U',\n            Û: 'U',\n            Ü: 'U',\n            Ý: 'Y',\n            à: 'a',\n            á: 'a',\n            â: 'a',\n            ã: 'a',\n            ä: 'a',\n            å: 'a',\n            ç: 'c',\n            è: 'e',\n            é: 'e',\n            ê: 'e',\n            ë: 'e',\n            ì: 'i',\n            í: 'i',\n            î: 'i',\n            ï: 'i',\n            ñ: 'n',\n            ò: 'o',\n            ô: 'o',\n            õ: 'o',\n            ö: 'o',\n            o̧: 'o',\n            ù: 'u',\n            ú: 'u',\n            û: 'u',\n            ü: 'u',\n            ý: 'y',\n\n            // Polish equivalents\n            Ą: 'A',\n            Ć: 'C',\n            Ę: 'E',\n            Ł: 'L',\n            Ń: 'N',\n            Ó: 'O',\n            Ś: 'S',\n            Ź: 'Z',\n            Ż: 'Z',\n            ą: 'a',\n            ć: 'c',\n            ę: 'e',\n            ł: 'l',\n            ń: 'n',\n            ó: 'o',\n            ś: 's',\n            ź: 'z',\n            ż: 'z',\n        };\n\n        // Normalize text using NFKD, which decomposes characters into base and combining characters\n        const normalizedText = text.normalize('NFKD');\n\n        // Remove any remaining combining characters\n        const strippedText = normalizedText.replace(/[\\u0300-\\u036f]/g, '');\n\n        // Replace characters based on the mapping\n        return strippedText\n            .replace(/[^\\u0000-\\u007F]/g, (char) => mapping[char] || char)\n            .replace(/[:;#*()]/g, '')\n            .replace('^', '')\n            .replace('%', ' procent');\n    },\n};\n","import { InputText } from 'primereact/inputtext';\nimport { bindUtils } from '../../../utils/bindUtils';\n\ntype DialogBindContentProps = {\n    bindAuthor: string;\n    bindText: string;\n    setBindAuthor: (author: string) => void;\n    setBindText: (text: string) => void;\n};\n\nexport default function DialogBindContent(props: DialogBindContentProps) {\n    return (\n        <>\n            <h5>Author</h5>\n            <InputText\n                value={bindUtils.replaceNonEnglishLatinChars(props.bindAuthor)}\n                onChange={(event) => props.setBindAuthor(event.target.value)}\n            />\n            <h5>Text</h5>\n            <InputText\n                value={bindUtils.replaceNonEnglishLatinChars(props.bindText)}\n                onChange={(event) => props.setBindText(event.target.value)}\n            />\n        </>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport { BindSuggestionEntry } from '../models/bindsModels';\nimport { appStore, AppState } from '../redux/store';\nimport { apiPaths } from '../utils/apiPaths';\nimport { bindSuggestionsActions } from '../redux/slices/bindSuggestionsSlice';\nimport { API_DOMAIN } from '../utils/envUtils';\nimport { notificationManager } from '../utils/notificationManager';\nimport { useSelector } from 'react-redux';\n\nexport const bindSuggestionsManagingService = {\n    useBindSuggestionsLoadingService: () => {\n        return useServerBindSuggestionsLoader();\n    },\n    getBindSuggestions: () => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BIND_SUGGESTIONS_PATH}/getBindSuggestions`,\n            {\n                method: 'get',\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((responseData: BindSuggestionEntry[]) => {\n                appStore.dispatch(\n                    bindSuggestionsActions.setBindSuggestions(responseData)\n                );\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while fetching bind suggestions: ${error.message}`\n                );\n            });\n    },\n    addNewBindSuggestion: (bind: BindSuggestionEntry) => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BIND_SUGGESTIONS_PATH}/addBindSuggestion`,\n            {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    author: bind.author,\n                    text: bind.text,\n                    proposed_by: bind.proposedBy!,\n                }),\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                bindSuggestionsManagingService.getBindSuggestions();\n                return response.json();\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while adding new bind suggestion: ${error.message}`\n                );\n                throw error;\n            });\n    },\n    deleteBindSuggestion: (bind: BindSuggestionEntry) => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BIND_SUGGESTIONS_PATH}/deleteBindSuggestion`,\n            {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    id: bind.id,\n                }),\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((jsonedResponse) => {\n                bindSuggestionsManagingService.getBindSuggestions();\n                return jsonedResponse.message;\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while deleting bind suggestion: ${error.message}`\n                );\n                throw error;\n            });\n    },\n};\n\nconst useServerBindSuggestionsLoader = () => {\n    const userData = useSelector(\n        (state: AppState) => state.userDataReducer.userData\n    );\n    const [isLoading, setIsLoading] = useState(true);\n    useEffect(() => {\n        setIsLoading(true);\n        bindSuggestionsManagingService.getBindSuggestions().finally(() => {\n            setIsLoading(false);\n        });\n    }, [userData]);\n    return isLoading;\n};\n","import { Dialog } from 'primereact/dialog';\nimport DialogBindContent from './DialogBindContent';\nimport { MutableRefObject } from 'react';\nimport { Button } from 'primereact/button';\nimport { BindSuggestionEntry } from '../../../models/bindsModels';\nimport { bindSuggestionsManagingService } from '../../../services/bindSuggestionsManagingService';\nimport { notificationManager } from '../../../utils/notificationManager';\nimport { useSelector } from 'react-redux';\nimport { AppState } from '../../../redux/store';\n\ntype AddNewBindSuggestionDialogProps = {\n    isDialogVisible: boolean;\n    setDialogVisibility: (visible: boolean) => void;\n    bindAuthor: string;\n    bindText: string;\n    setBindAuthor: (author: string) => void;\n    setBindText: (text: string) => void;\n    bindEditingIdRef: MutableRefObject<Number>;\n};\n\nexport default function AddNewBindSuggestionDialog(\n    props: AddNewBindSuggestionDialogProps\n) {\n    const steamUserData = useSelector(\n        (state: AppState) => state.userDataReducer.userData\n    );\n    const newBindSuggestionDialogFooter = (\n        <>\n            <Button\n                label=\"Cancel\"\n                icon=\"pi pi-times\"\n                className=\"p-button-text\"\n                onClick={() => props.setDialogVisibility(false)}\n            />\n            <Button\n                label=\"Save\"\n                icon=\"pi pi-check\"\n                className=\"p-button-text\"\n                onClick={() => {\n                    const newBind = {\n                        id: -1,\n                        proposedBy: steamUserData!.personaname,\n                        author: props.bindAuthor,\n                        text: props.bindText,\n                    } as BindSuggestionEntry;\n                    bindSuggestionsManagingService\n                        .addNewBindSuggestion(newBind)\n                        .then(() => {\n                            notificationManager.SUCCESS(\n                                `Successfully suggested new bind`\n                            );\n                            props.setDialogVisibility(false);\n                            props.setBindText('');\n                        })\n                        .catch((error) => {\n                            notificationManager.ERROR(\n                                `Couldn't suggest the bind: ${error}`\n                            );\n                        });\n                }}\n            />\n        </>\n    );\n\n    return (\n        <Dialog\n            visible={props.isDialogVisible}\n            header=\"Suggest new bind\"\n            modal\n            className=\"p-fluid\"\n            footer={newBindSuggestionDialogFooter}\n            onHide={() => props.setDialogVisibility(false)}\n        >\n            <DialogBindContent\n                setBindText={props.setBindText}\n                bindText={props.bindText}\n                setBindAuthor={props.setBindAuthor}\n                bindAuthor={props.bindAuthor}\n            />\n        </Dialog>\n    );\n}\n","import { Column } from 'primereact/column';\nimport { DataTable } from 'primereact/datatable';\nimport './HallOfFameSuggestions.css';\nimport { useSelector } from 'react-redux';\nimport { AppState } from '../../redux/store';\nimport { bindsManagingService } from '../../services/bindsManagingService';\nimport { Button } from 'primereact/button';\nimport { BindEntry, BindSuggestionEntry } from '../../models/bindsModels';\nimport { useRef, useState } from 'react';\nimport { Toolbar } from 'primereact/toolbar';\nimport { bindSuggestionsManagingService } from '../../services/bindSuggestionsManagingService';\nimport { notificationManager } from '../../utils/notificationManager';\nimport AddNewBindSuggestionDialog from './Dialogues/AddNewBindSuggestionDalog';\nimport { PageWithBackground } from '../PageLayout/PageBackground/PageWithBackground';\nimport { BACKGROUNDS } from '../PageLayout/PageBackground/backgrounds';\nimport { trimBindAuthor } from '../../utils/bindUtils';\n\nconst mapBinds = (binds: BindEntry[] | BindSuggestionEntry[]) => {\n    return binds.map((bind) => {\n        return {\n            ...bind,\n            author: `${bind.author} : `,\n        };\n    });\n};\n\nconst getToolbarLeftSide = (\n    userID: string | undefined,\n    setNewBindSuggestionDialogVisibility: (\n        value: boolean | ((prevVar: boolean) => boolean)\n    ) => void\n) => {\n    return (\n        <>\n            {userID && (\n                <Button\n                    label=\"Suggest Bind\"\n                    icon=\"pi pi-plus\"\n                    className=\"p-button-success mr-2\"\n                    data-toggle=\"tooltip\"\n                    title=\"Adds new bind suggestion\"\n                    onClick={() => setNewBindSuggestionDialogVisibility(true)}\n                ></Button>\n            )}\n        </>\n    );\n};\n\nconst bindSuggestionBody = (\n    rowData: BindSuggestionEntry,\n    isAdmin: boolean,\n    userData: any\n) => {\n    return (\n        isAdmin && (\n            <>\n                <Button\n                    data-toggle=\"tooltip\"\n                    title=\"Accepts the given bind\"\n                    icon=\"pi pi-check\"\n                    className=\"p-button-rounded p-button-success\"\n                    onClick={() => {\n                        const bind = trimBindAuthor(\n                            rowData\n                        ) as BindSuggestionEntry;\n                        bindsManagingService\n                            .addNewBind(bind, userData?.steamid)\n                            .then((addedBind) => {\n                                notificationManager.SUCCESS(\n                                    `Successfully accepted new bind: ${addedBind}`\n                                );\n                                bindSuggestionsManagingService.deleteBindSuggestion(\n                                    bind\n                                );\n                            })\n                            .catch((error) => {\n                                notificationManager.ERROR(\n                                    `Couldn't add new bind: ${error}`\n                                );\n                            });\n                    }}\n                />\n\n                <Button\n                    data-toggle=\"tooltip\"\n                    title=\"Deletes the given bind suggestion instantly\"\n                    icon=\"pi pi-times\"\n                    className=\"p-button-rounded p-button-danger\"\n                    onClick={() => {\n                        bindSuggestionsManagingService\n                            .deleteBindSuggestion(rowData)\n                            .then((deletedBind) => {\n                                notificationManager.SUCCESS(\n                                    `Successfully deleted bind suggestion: ${deletedBind}`\n                                );\n                            })\n                            .catch((error) => {\n                                notificationManager.ERROR(\n                                    `Couldn't delete bind suggestion: ${error}`\n                                );\n                            });\n                    }}\n                />\n            </>\n        )\n    );\n};\n\nexport default function HallOfFameSuggestions() {\n    const bindSuggestions = useSelector(\n        (state: AppState) => state.bindSuggestionsReducer.bindSuggestions\n    );\n\n    const userID = useSelector(\n        (state: AppState) => state.userDataReducer.userID\n    );\n    const userData = useSelector(\n        (state: AppState) => state.userDataReducer.userData\n    );\n    const isAdmin: boolean = useSelector(\n        (state: AppState) => state.userDataReducer.isAdmin\n    );\n\n    const [\n        newBindSuggestionDialogVisibility,\n        setNewBindSuggestionDialogVisibility,\n    ] = useState(false);\n\n    const [bindAuthor, setBindAuthor] = useState('');\n    const editingBindID = useRef(-1);\n\n    const [bindText, setBindText] = useState('');\n\n    const isLoading =\n        bindSuggestionsManagingService.useBindSuggestionsLoadingService();\n\n    return (\n        <PageWithBackground imageUrl={BACKGROUNDS.BACKGROUND_2}>\n            <div className=\"hall-of-fame-suggestions\">\n                <div className=\"card\">\n                    <AddNewBindSuggestionDialog\n                        setBindText={setBindText}\n                        bindText={bindText}\n                        setBindAuthor={setBindAuthor}\n                        bindAuthor={bindAuthor}\n                        bindEditingIdRef={editingBindID}\n                        isDialogVisible={newBindSuggestionDialogVisibility}\n                        setDialogVisibility={\n                            setNewBindSuggestionDialogVisibility\n                        }\n                    />\n\n                    <Toolbar\n                        className=\"mb-4\"\n                        start={getToolbarLeftSide(\n                            userID,\n                            setNewBindSuggestionDialogVisibility\n                        )}\n                    ></Toolbar>\n\n                    <>\n                        <div className=\"centered-text\">Bind Suggestions</div>\n                        <div className=\"card\">\n                            {isLoading ? (\n                                <p>Loading...</p>\n                            ) : (\n                                <DataTable\n                                    value={mapBinds(bindSuggestions)}\n                                    scrollable={true}\n                                    scrollHeight=\"flex\"\n                                >\n                                    <Column\n                                        field=\"proposedBy\"\n                                        header=\"Proposed By\"\n                                    ></Column>\n                                    <Column\n                                        field=\"id\"\n                                        header=\"database ID\"\n                                        sortable\n                                    ></Column>\n                                    <Column\n                                        field=\"author\"\n                                        header=\"Author\"\n                                        sortable\n                                    ></Column>\n                                    <Column\n                                        field=\"text\"\n                                        header=\"Text\"\n                                        sortable\n                                    ></Column>\n                                    <Column\n                                        header=\"Actions\"\n                                        body={(rowData) =>\n                                            bindSuggestionBody(\n                                                rowData,\n                                                isAdmin,\n                                                userData\n                                            )\n                                        }\n                                    ></Column>\n                                </DataTable>\n                            )}\n                        </div>\n                    </>\n                </div>\n            </div>\n        </PageWithBackground>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport {\n    AttachedBindVoteData,\n    BindEntry,\n    BindVote,\n    BindVotingType,\n} from '../models/bindsModels';\nimport { AppState, appStore } from '../redux/store';\nimport { bindsActions } from '../redux/slices/bindsSlice';\nimport { apiPaths } from '../utils/apiPaths';\nimport { useSelector } from 'react-redux';\nimport { API_DOMAIN } from '../utils/envUtils';\nimport { notificationManager } from '../utils/notificationManager';\n\n\nexport const bindsManagingService = {\n    useBindsLoadingService: (steamUserID?: string) => {\n        return useServerBindsLoader(steamUserID ? steamUserID : undefined);\n    },\n    getBinds: (userSteamID?: string) => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BINDS_PATH}/getBinds`,\n            {\n                method: 'get',\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((bindEntries: BindEntry[]) => {\n                return getRawBindVotings().then((bindVotings) => {\n                    let selfBindVotes: BindVote[] = [];\n                    if (userSteamID) {\n                        selfBindVotes = bindVotings.filter(\n                            (testBind) => testBind.voterSteamID === userSteamID\n                        );\n                    }\n\n                    const mappedBindVotings: AttachedBindVoteData[] = [];\n                    bindVotings?.forEach((rawBindVoting) => {\n                        const vote: BindVotingType =\n                            rawBindVoting.vote === 'Upvote'\n                                ? BindVotingType.UPVOTE\n                                : BindVotingType.DOWNVOTE;\n                        const upVote: boolean = vote === BindVotingType.UPVOTE;\n                        const downVote: boolean =\n                            vote === BindVotingType.DOWNVOTE;\n                        const existingVotingData = mappedBindVotings.find(\n                            (testBindVote: AttachedBindVoteData) =>\n                                testBindVote.attachedBindID ===\n                                Number(rawBindVoting.votedBindID)\n                        );\n\n                        if (existingVotingData) {\n                            upVote && existingVotingData.Upvotes++;\n                            downVote && existingVotingData.Downvotes++;\n                        } else {\n                            const newVotingData: AttachedBindVoteData = {\n                                id: Number(rawBindVoting.votedBindID),\n                                attachedBindID: Number(\n                                    rawBindVoting.votedBindID\n                                ),\n                                Upvotes: upVote ? 1 : 0,\n                                Downvotes: downVote ? 1 : 0,\n                            };\n                            mappedBindVotings.push(newVotingData);\n                        }\n                    });\n\n                    mappedBindVotings?.forEach(\n                        (mappedBindVoting: AttachedBindVoteData) => {\n                            const bindEntryToAttachTo = bindEntries.find(\n                                (testBindEntry) =>\n                                    testBindEntry.id ===\n                                    mappedBindVoting.attachedBindID\n                            );\n                            if (bindEntryToAttachTo) {\n                                bindEntryToAttachTo.votingData =\n                                    mappedBindVoting;\n                            }\n                        }\n                    );\n\n                    selfBindVotes?.forEach((selfBindVote) => {\n                        const existingBind = bindEntries.find(\n                            (bindEntry) =>\n                                bindEntry.id ===\n                                Number(selfBindVote.votedBindID)\n                        );\n                        if (existingBind) {\n                            existingBind.votingData!.selfVote =\n                                selfBindVote.vote;\n                        }\n                    });\n\n                    appStore.dispatch(bindsActions.setBinds(bindEntries));\n                });\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while fetching binds: ${error.message}`\n                );\n            });\n    },\n    setVote: (votingData: BindVote, undoVote?: boolean): Promise<string> => {\n        const urlSearchParams = new URLSearchParams({\n            voterSteamID: votingData.voterSteamID!,\n            votedBindID: votingData.votedBindID!,\n            vote: votingData.vote!,\n        });\n        votingData.id && urlSearchParams.set('id', votingData.id.toString());\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${\n                apiPaths.BIND_VOTES_PATH\n            }/${undoVote ? 'deleteBindVoting' : 'addBindVoting'}`,\n            {\n                method: 'post',\n                body: urlSearchParams,\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                bindsManagingService.getBinds(votingData.voterSteamID);\n                return response.text();\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while setting vote: ${error.message}`\n                );\n                throw error;\n            });\n    },\n    addNewBind: (bind: BindEntry, steamUserID?: string) => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BINDS_PATH}/addBind`,\n            {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    author: bind.author,\n                    text: bind.text,\n                }),\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                bindsManagingService.getBinds(steamUserID);\n                return response.json();\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while adding new bind: ${error.message}`\n                );\n                throw error;\n            });\n    },\n    deleteBind: (bind: BindEntry, steamUserID?: string) => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BINDS_PATH}/deleteBind`,\n            {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    id: bind.id,\n                }),\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((jsonedResponse) => {\n                bindsManagingService.getBinds(steamUserID);\n                return jsonedResponse.message;\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while deleting bind: ${error.message}`\n                );\n                throw error;\n            });\n    },\n    updateBind: (newBindData: BindEntry, steamUserID?: string) => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BINDS_PATH}/updateBind`,\n            {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    id: newBindData.id,\n                    author: `${newBindData.author}`,\n                    text: `${newBindData.text}`,\n                }),\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((jsonedResponse) => {\n                bindsManagingService.getBinds(steamUserID);\n                return jsonedResponse.message;\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while updating bind: ${error.message}`\n                );\n                throw error;\n            });\n    },\n};\n\nconst getRawBindVotings = (): Promise<BindVote[]> => {\n    return fetch(\n        `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BIND_VOTES_PATH}/getBindVotings`,\n        {\n            method: 'get',\n        }\n    )\n        .then((response) => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .catch((error) => {\n            notificationManager.ERROR(\n                `Error while fetching bind votes: ${error.message}`\n            );\n            return [];\n        });\n};\n\nconst useServerBindsLoader = (steamUserID?: string) => {\n    const userData = useSelector(\n        (state: AppState) => state.userDataReducer.userData\n    );\n    const [isLoading, setIsLoading] = useState(true);\n    useEffect(() => {\n        setIsLoading(true);\n        bindsManagingService.getBinds(steamUserID).finally(() => {\n            setIsLoading(false);\n        });\n    }, [userData, steamUserID]);\n    return isLoading;\n};\n","export type AttachedBindVoteData = {\n    id?: number;\n    attachedBindID: number;\n    Upvotes: number;\n    Downvotes: number;\n    selfVote?: BindVotingType;\n};\n\nexport type BindVote = {\n    id?: number;\n    voterSteamID?: string;\n    votedBindID?: string;\n    vote?: BindVotingType;\n};\n\nexport enum BindVotingType {\n    UPVOTE = 'Upvote',\n    DOWNVOTE = 'Downvote',\n}\n\nexport type BindEntry = {\n    id: number;\n    author: string;\n    text: string;\n    votingData?: AttachedBindVoteData;\n};\n\nexport type BindSuggestionEntry = BindEntry & { proposedBy: string };\n","// extracted by mini-css-extract-plugin\nexport default {\"pageWithBackground\":\"PageWithBackground_pageWithBackground__nL8hr\"};","import styles from './PageWithBackground.module.css';\nimport React from 'react';\n\nexport type PageWithBackgroundProps = {\n    imageUrl: string;\n} & React.PropsWithChildren;\n\nexport const PageWithBackground = (props: PageWithBackgroundProps) => {\n    return (\n        <div\n            className={styles.pageWithBackground}\n            style={{\n                backgroundImage: `url(${props.imageUrl})`,\n            }}\n        >\n            {props.children}\n        </div>\n    );\n};\n","import background1 from '../../../resources/backgrounds/background_1.jpg';\nimport background2 from '../../../resources/backgrounds/background_2.jpg';\nimport background3 from '../../../resources/backgrounds/background_3.jpg';\nimport background4 from '../../../resources/backgrounds/background_4.jpg';\nimport background5 from '../../../resources/backgrounds/background_5.jpg';\nimport background6 from '../../../resources/backgrounds/background_6.jpg';\n\nimport { Image } from 'primereact/image';\nconst createBackgroundUrl = (imageLoc: Image) => {\n    return `${imageLoc}`;\n};\nexport const BACKGROUNDS = {\n    BACKGROUND_1: createBackgroundUrl(background1),\n    BACKGROUND_2: createBackgroundUrl(background2),\n    BACKGROUND_3: createBackgroundUrl(background3),\n    BACKGROUND_4: createBackgroundUrl(background4),\n    BACKGROUND_5: createBackgroundUrl(background5),\n    BACKGROUND_6: createBackgroundUrl(background6),\n};\n"],"names":["trimBindAuthor","bind","author","replace","trim","bindUtils","replaceNonEnglishLatinChars","text","mapping","À","Á","Â","Ã","Ä","Å","Ç","È","É","Ê","Ë","Ì","Í","Î","Ï","Ñ","Ò","Ô","Õ","Ö","O̧","Ù","Ú","Û","Ü","Ý","à","á","â","ã","ä","å","ç","è","é","ê","ë","ì","í","î","ï","ñ","ò","ô","õ","ö","o̧","ù","ú","û","ü","ý","Ą","Ć","Ę","Ł","Ń","Ó","Ś","Ź","Ż","ą","ć","ę","ł","ń","ó","ś","ź","ż","normalize","char","DialogBindContent","props","_jsxs","_Fragment","children","_jsx","InputText","value","bindAuthor","onChange","event","setBindAuthor","target","bindText","setBindText","bindSuggestionsManagingService","useBindSuggestionsLoadingService","useServerBindSuggestionsLoader","getBindSuggestions","fetch","API_DOMAIN","apiPaths","API_BASE_PATH","BIND_SUGGESTIONS_PATH","method","then","response","ok","Error","status","json","responseData","appStore","dispatch","bindSuggestionsActions","setBindSuggestions","catch","error","notificationManager","ERROR","message","addNewBindSuggestion","headers","body","JSON","stringify","proposed_by","proposedBy","deleteBindSuggestion","id","jsonedResponse","userData","useSelector","state","userDataReducer","isLoading","setIsLoading","useState","useEffect","finally","AddNewBindSuggestionDialog","steamUserData","newBindSuggestionDialogFooter","Button","label","icon","className","onClick","setDialogVisibility","newBind","personaname","SUCCESS","Dialog","visible","isDialogVisible","header","modal","footer","onHide","mapBinds","binds","map","getToolbarLeftSide","userID","setNewBindSuggestionDialogVisibility","title","bindSuggestionBody","rowData","isAdmin","bindsManagingService","addNewBind","steamid","addedBind","deletedBind","HallOfFameSuggestions","bindSuggestions","bindSuggestionsReducer","newBindSuggestionDialogVisibility","editingBindID","useRef","PageWithBackground","imageUrl","BACKGROUNDS","BACKGROUND_2","bindEditingIdRef","Toolbar","start","DataTable","scrollable","scrollHeight","Column","field","sortable","useBindsLoadingService","steamUserID","useServerBindsLoader","undefined","getBinds","userSteamID","BINDS_PATH","bindEntries","getRawBindVotings","bindVotings","_selfBindVotes","selfBindVotes","filter","testBind","voterSteamID","mappedBindVotings","forEach","rawBindVoting","vote","BindVotingType","UPVOTE","DOWNVOTE","upVote","downVote","existingVotingData","find","testBindVote","attachedBindID","Number","votedBindID","Upvotes","Downvotes","newVotingData","push","mappedBindVoting","bindEntryToAttachTo","testBindEntry","votingData","selfBindVote","existingBind","bindEntry","selfVote","bindsActions","setBinds","setVote","undoVote","urlSearchParams","URLSearchParams","set","toString","BIND_VOTES_PATH","deleteBind","updateBind","newBindData","styles","style","backgroundImage","createBackgroundUrl","imageLoc","BACKGROUND_1","background1","background2","BACKGROUND_3","background3","BACKGROUND_4","background4","BACKGROUND_5","background5","BACKGROUND_6","background6"],"sourceRoot":""}