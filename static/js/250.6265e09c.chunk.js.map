{"version":3,"file":"static/js/250.6265e09c.chunk.js","mappings":"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","sources":["utils/retryUtils.ts","services/serverInfoService.ts","components/HomePage/sections/ServerInfoSection.tsx","services/commandsManagingService.ts","components/HomePage/sections/DialogCommandContent.tsx","components/HomePage/sections/EditCommandDialog.tsx","components/HomePage/sections/AddNewCommandDialog.tsx","components/HomePage/sections/CommandsSection.tsx","components/HomePage/HomePage.tsx","webpack://kether.pl/./src/components/PageLayout/PageBackground/PageWithBackground.module.css?73d0","components/PageLayout/PageBackground/PageWithBackground.tsx","components/PageLayout/PageBackground/backgrounds.ts"],"sourcesContent":["/**\n * Retry mechanisms for failed operations\n */\n\nimport React from 'react';\nimport { AppError, ErrorType, isRetryableError, createAppError, ErrorSeverity } from './errorUtils';\nimport errorLogger from './errorLogger';\n\nexport interface RetryOptions {\n    maxAttempts: number;\n    initialDelay: number;\n    maxDelay: number;\n    backoffMultiplier: number;\n    retryCondition?: (error: AppError) => boolean;\n    onRetry?: (attempt: number, error: AppError) => void;\n}\n\nexport interface RetryResult<T> {\n    success: boolean;\n    data?: T;\n    error?: AppError;\n    attempts: number;\n}\n\nconst DEFAULT_RETRY_OPTIONS: RetryOptions = {\n    maxAttempts: 3,\n    initialDelay: 1000,\n    maxDelay: 10000,\n    backoffMultiplier: 2,\n    retryCondition: isRetryableError,\n};\n\n/**\n * Retry an async operation with exponential backoff\n */\nexport async function retryAsync<T>(\n    operation: () => Promise<T>,\n    options: Partial<RetryOptions> = {},\n    context?: { component?: string; action?: string }\n): Promise<RetryResult<T>> {\n    const config = { ...DEFAULT_RETRY_OPTIONS, ...options };\n    let lastError: AppError | undefined;\n    let delay = config.initialDelay;\n\n    for (let attempt = 1; attempt <= config.maxAttempts; attempt++) {\n        try {\n            const data = await operation();\n            return {\n                success: true,\n                data,\n                attempts: attempt,\n            };\n        } catch (error) {\n            const appError = createAppError(\n                error,\n                ErrorType.UNKNOWN,\n                ErrorSeverity.MEDIUM,\n                { ...context, attempt }\n            );\n\n            lastError = appError;\n\n            // Log the retry attempt\n            errorLogger.logErrorWithRetry(\n                error,\n                { ...context, attempt },\n                attempt - 1\n            );\n\n            // Check if we should retry\n            const shouldRetry = attempt < config.maxAttempts && \n                              (config.retryCondition ? config.retryCondition(appError) : true);\n\n            if (!shouldRetry) {\n                break;\n            }\n\n            // Call retry callback\n            if (config.onRetry) {\n                config.onRetry(attempt, appError);\n            }\n\n            // Wait before next attempt (except for the last attempt)\n            if (attempt < config.maxAttempts) {\n                await sleep(delay);\n                delay = Math.min(delay * config.backoffMultiplier, config.maxDelay);\n            }\n        }\n    }\n\n    return {\n        success: false,\n        error: lastError,\n        attempts: config.maxAttempts,\n    };\n}\n\n/**\n * Retry a synchronous operation\n */\nexport function retrySynchronous<T>(\n    operation: () => T,\n    options: Partial<RetryOptions> = {},\n    context?: { component?: string; action?: string }\n): RetryResult<T> {\n    const config = { ...DEFAULT_RETRY_OPTIONS, ...options };\n    let lastError: AppError | undefined;\n\n    for (let attempt = 1; attempt <= config.maxAttempts; attempt++) {\n        try {\n            const data = operation();\n            return {\n                success: true,\n                data,\n                attempts: attempt,\n            };\n        } catch (error) {\n            const appError = createAppError(\n                error,\n                ErrorType.UNKNOWN,\n                ErrorSeverity.MEDIUM,\n                { ...context, attempt }\n            );\n\n            lastError = appError;\n\n            // Log the retry attempt\n            errorLogger.logErrorWithRetry(\n                error,\n                { ...context, attempt },\n                attempt - 1\n            );\n\n            // Check if we should retry\n            const shouldRetry = attempt < config.maxAttempts && \n                              (config.retryCondition ? config.retryCondition(appError) : true);\n\n            if (!shouldRetry) {\n                break;\n            }\n\n            // Call retry callback\n            if (config.onRetry) {\n                config.onRetry(attempt, appError);\n            }\n        }\n    }\n\n    return {\n        success: false,\n        error: lastError,\n        attempts: config.maxAttempts,\n    };\n}\n\n/**\n * React hook for retry functionality\n */\nexport function useRetry() {\n    const [isRetrying, setIsRetrying] = React.useState(false);\n    const [retryCount, setRetryCount] = React.useState(0);\n\n    const retry = React.useCallback(async <T>(\n        operation: () => Promise<T>,\n        options?: Partial<RetryOptions>,\n        context?: { component?: string; action?: string }\n    ): Promise<RetryResult<T>> => {\n        setIsRetrying(true);\n        setRetryCount(prev => prev + 1);\n\n        try {\n            const result = await retryAsync(operation, options, context);\n            return result;\n        } finally {\n            setIsRetrying(false);\n        }\n    }, []);\n\n    const reset = React.useCallback(() => {\n        setIsRetrying(false);\n        setRetryCount(0);\n    }, []);\n\n    return {\n        retry,\n        isRetrying,\n        retryCount,\n        reset,\n    };\n}\n\n/**\n * Higher-order function to add retry capability to any async function\n */\nexport function withRetry<T extends (...args: any[]) => Promise<any>>(\n    fn: T,\n    options: Partial<RetryOptions> = {}\n): (...args: Parameters<T>) => Promise<RetryResult<Awaited<ReturnType<T>>>> {\n    return async (...args: Parameters<T>) => {\n        return retryAsync(() => fn(...args), options);\n    };\n}\n\n/**\n * Utility to create retry-enabled API calls\n */\nexport function createRetryableApiCall<T>(\n    apiCall: () => Promise<T>,\n    options: Partial<RetryOptions> = {}\n) {\n    const retryOptions: RetryOptions = {\n        ...DEFAULT_RETRY_OPTIONS,\n        retryCondition: (error) => {\n            // Retry on network errors and 5xx server errors, but not 4xx client errors\n            return error.type === ErrorType.NETWORK || \n                   (error.type === ErrorType.SERVER && error.code !== 500);\n        },\n        ...options,\n    };\n\n    return () => retryAsync(apiCall, retryOptions, { action: 'api_call' });\n}\n\n/**\n * Sleep utility for delays\n */\nfunction sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n","import { MutableRefObject, useEffect, useRef } from 'react';\nimport { API_PATHS } from '../utils/apiPaths';\nimport { AppState, appStore } from '../redux/store';\nimport { serverInfoActions } from '../redux/slices/serverInfoSlice';\nimport { ServerInfo } from '../models/serverInfoModels';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { notificationManager } from '../utils/notificationManager';\nimport { API_CONFIG } from '../utils/constants';\nimport { ErrorType, getUserFriendlyMessage } from '../utils/errorUtils';\nimport errorLogger from '../utils/errorLogger';\nimport { retryAsync } from '../utils/retryUtils';\nexport const serverInfoService = {\n    useServerInfoLoadingService: () => {\n        const serverInfo = useSelector(\n            (state: AppState) => state.serverInfoReducer.serverInfo\n        );\n        const isLoading = useRef(false);\n\n        useEffect(() => {\n            if (!serverInfo) {\n                if (!isLoading.current) {\n                    refreshServerInfo(serverInfo, isLoading);\n                }\n            }\n            const refreshDataInterval = setInterval(() => {\n                if (!isLoading.current) {\n                    refreshServerInfo(serverInfo, isLoading);\n                }\n            }, API_CONFIG.REFRESH_INTERVAL_MS);\n            return () => {\n                clearInterval(refreshDataInterval);\n            };\n        }, [serverInfo]);\n    },\n};\n\nconst refreshServerInfo = async (\n    actualServerInfo: ServerInfo | undefined,\n    isLoading: MutableRefObject<boolean>\n) => {\n    isLoading.current = true;\n    \n    const result = await retryAsync(\n        async () => {\n            const response = await axios.get(API_PATHS.SERVER_INFO, {\n                timeout: API_CONFIG.DEFAULT_TIMEOUT_MS,\n            });\n            return response.data as ServerInfo;\n        },\n        {\n            maxAttempts: 3,\n            initialDelay: 1000,\n            retryCondition: (error) => {\n                // Retry on network errors and 5xx server errors\n                return error.type === ErrorType.NETWORK || \n                       (error.type === ErrorType.SERVER && error.code !== 500);\n            },\n        },\n        {\n            component: 'ServerInfoService',\n            action: 'fetch_server_info',\n        }\n    );\n\n    try {\n        if (result.success && result.data) {\n            const newServerInfo: ServerInfo = result.data;\n            // Set status based on if the response data is not empty\n            newServerInfo.status = Object.keys(newServerInfo).length > 0 ? '1' : '0';\n            appStore.dispatch(serverInfoActions.setServerInfo(newServerInfo));\n        } else if (result.error) {\n            // Log the error with full context\n            errorLogger.logError(\n                result.error,\n                {\n                    component: 'ServerInfoService',\n                    action: 'fetch_server_info',\n                    attempts: result.attempts,\n                },\n                result.error.type,\n                result.error.severity\n            );\n\n            // Show user-friendly error message\n            const userMessage = getUserFriendlyMessage(result.error);\n            notificationManager.ERROR(userMessage);\n\n            // Set offline server info as fallback\n            const offlineServerInfo: ServerInfo = {\n                name: 'Kether.pl',\n                map: '–',\n                players: '0',\n                maxplayers: '0',\n                bots: 0,\n                playerdetails: [],\n                status: '0',\n            };\n            appStore.dispatch(serverInfoActions.setServerInfo(offlineServerInfo));\n        }\n    } finally {\n        isLoading.current = false;\n    }\n};\n","import { Button } from 'primereact/button';\nimport { useSelector } from 'react-redux';\nimport { AppState } from '../../../redux/store';\nimport { serverInfoService } from '../../../services/serverInfoService';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { PlayerDetails } from '../../../models/serverInfoModels';\nimport { notificationManager } from '../../../utils/notificationManager';\nimport { SERVER_CONFIG, SUCCESS_MESSAGES } from '../../../utils/constants';\nimport { withServerInfoErrorBoundary } from '../../ErrorBoundary/SpecificErrorBoundaries';\nimport React, { useCallback } from 'react';\n\nfunction ServerInfoSection() {\n    const serverInfo = useSelector(\n        (state: AppState) => state.serverInfoReducer.serverInfo\n    );\n\n    serverInfoService.useServerInfoLoadingService();\n\n    const getFormattedGamePlayTime = useCallback((duration: number): string => {\n        // Hours, minutes and seconds\n        const hrs = ~~(duration / 3600);\n        const mins = ~~((duration % 3600) / 60);\n        const secs = ~~duration % 60;\n\n        // Output like \"1:01\" or \"4:03:59\" or \"123:03:59\"\n        let ret = '';\n\n        if (hrs > 0) {\n            ret += '' + hrs + ':' + (mins < 10 ? '0' : '');\n        }\n\n        ret += '' + mins + ':' + (secs < 10 ? '0' : '');\n        ret += '' + secs;\n\n        return ret;\n    }, []);\n\n    const getPlayerGameTimeColumnBody = useCallback((rowData: PlayerDetails) => {\n        return <span>{getFormattedGamePlayTime(rowData.duration)}</span>;\n    }, [getFormattedGamePlayTime]);\n\n    const getPlayerList = useCallback(() => {\n        if (!serverInfo?.playerdetails?.length) return null;\n        \n        return (\n            <div className={'player-list-table'}>\n                <DataTable\n                    value={serverInfo.playerdetails}\n                    removableSort\n                    sortMode=\"multiple\"\n                    scrollable={true}\n                >\n                    <Column field={'name'} header={'Nickname'} sortable />\n                    <Column field={'score'} header={'Score'} sortable />\n                    <Column\n                        body={getPlayerGameTimeColumnBody}\n                        header={'Duration'}\n                    />\n                </DataTable>\n            </div>\n        );\n    }, [serverInfo, getPlayerGameTimeColumnBody]);\n\n    return (\n        <div className=\"section future-rot\">\n            <span>Name: {serverInfo?.name}</span>\n            <span>\n                IP: {SERVER_CONFIG.IP}\n                <Button\n                    icon={'pi pi-copy'}\n                    style={{ scale: '0.8', verticalAlign: 'unset' }}\n                    onClick={() => {\n                        navigator.clipboard.writeText(SERVER_CONFIG.IP);\n                        notificationManager.SUCCESS(SUCCESS_MESSAGES.COPY_SUCCESS);\n                    }}\n                />\n            </span>\n            <span>\n                Players: {serverInfo?.players}/{serverInfo?.maxplayers} ({serverInfo?.bots} {serverInfo?.bots === 1 ? 'bot' : 'bots'})\n            </span>\n            <span>\n                Status: {serverInfo?.status === '1' ? 'Online' : 'Offline'}\n            </span>\n            <span>Map: {serverInfo?.map}</span>\n            <span>\n                <Button\n                    label=\"Join game\"\n                    onClick={() => {\n                        window.location.href = SERVER_CONFIG.STEAM_CONNECT_URL;\n                    }}\n                ></Button>\n            </span>\n            {getPlayerList() && (\n                <span>{getPlayerList()}</span>\n            )}\n            <span className=\"centered-text\">\n                You can download all the custom maps installed on the server\n                <a\n                    style={{\n                        display: 'inline-block',\n                        marginLeft: '10px',\n                        textDecoration: 'none',\n                        color: 'white',\n                        WebkitTextStroke: ' 3px red',\n                    }}\n                    href=\"https://steamcommunity.com/sharedfiles/filedetails/?id=2542824628\"\n                >\n                    HERE\n                </a>\n            </span>\n        </div>\n    );\n}\n\nexport default withServerInfoErrorBoundary(ServerInfoSection);\n","import { useEffect } from 'react';\nimport { CommandEntry } from '../models/commandModels';\nimport { appStore } from '../redux/store';\nimport { commandsActions } from '../redux/slices/commandsSlice';\nimport { API_PATHS } from '../utils/apiPaths';\nimport { notificationManager } from '../utils/notificationManager';\n\nexport const commandsManagingService = {\n    useCommandsLoadingService: () => {\n        useServerCommandsLoader();\n    },\n    getCommands: () => {\n        return fetch(`${API_PATHS.COMMANDS}/getCommands`, {\n            method: 'get',\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((commandEntries: CommandEntry[]) => {\n                appStore.dispatch(commandsActions.setCommands(commandEntries));\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while fetching commands: ${error.message}`\n                );\n            });\n    },\n    addNewCommand: (command: CommandEntry) => {\n        return fetch(`${API_PATHS.COMMANDS}/addCommand`, {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                command: command.command,\n                description: command.description,\n            }),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((responseData) => {\n                commandsManagingService.getCommands();\n                return responseData;\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while adding new command: ${error.message}`\n                );\n                throw error;\n            });\n    },\n    deleteCommand: (command: CommandEntry) => {\n        return fetch(`${API_PATHS.COMMANDS}/deleteCommand`, {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                id: command.id,\n            }),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((jsonedResponse) => {\n                commandsManagingService.getCommands();\n                return jsonedResponse.message;\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while deleting command: ${error.message}`\n                );\n                throw error;\n            });\n    },\n    updateCommand: (newCommandData: CommandEntry) => {\n        return fetch(`${API_PATHS.COMMANDS}/updateCommand`, {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                id: newCommandData.id,\n                command: newCommandData.command,\n                description: newCommandData.description,\n            }),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((jsonedResponse) => {\n                commandsManagingService.getCommands();\n                return jsonedResponse.message;\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while updating command: ${error.message}`\n                );\n                throw error;\n            });\n    },\n};\n\nconst useServerCommandsLoader = () => {\n    useEffect(() => {\n        commandsManagingService.getCommands();\n    }, []);\n};\n","import { InputText } from 'primereact/inputtext';\n\ntype DialogCommandContentProps = {\n    command: string;\n    commandDescription: string;\n    setCommand: (command: string) => void;\n    setCommandDescription: (description: string) => void;\n};\n\nexport default function DialogCommandContent(props: DialogCommandContentProps) {\n    return (\n        <>\n            <h5>Command</h5>\n            <InputText\n                value={props.command}\n                onChange={(event) => props.setCommand(event.target.value)}\n            />\n            <h5>Description</h5>\n            <InputText\n                value={props.commandDescription}\n                onChange={(event) =>\n                    props.setCommandDescription(event.target.value)\n                }\n            />\n        </>\n    );\n}\n","import { Dialog } from 'primereact/dialog';\nimport { Button } from 'primereact/button';\nimport { notificationManager } from '../../../utils/notificationManager';\nimport { MutableRefObject } from 'react';\nimport { CommandEntry } from '../../../models/commandModels';\nimport { commandsManagingService } from '../../../services/commandsManagingService';\nimport DialogCommandContent from './DialogCommandContent';\n\ntype EditCommandDialogProps = {\n    isDialogVisible: boolean;\n    setDialogVisibility: (visible: boolean) => void;\n    command: string;\n    commandDescription: string;\n    setCommand: (author: string) => void;\n    setCommandDescription: (text: string) => void;\n    commandEditingIdRef: MutableRefObject<Number>;\n};\n\nexport default function EditCommandDialog(props: EditCommandDialogProps) {\n    const editCommandDialogFooter = () => {\n        return (\n            <>\n                <Button\n                    label=\"Cancel\"\n                    icon=\"pi pi-times\"\n                    className=\"p-button-text\"\n                    onClick={() => {\n                        props.commandEditingIdRef.current = -1;\n                        props.setDialogVisibility(false);\n                    }}\n                />\n\n                <Button\n                    label=\"Update\"\n                    icon=\"pi pi-check\"\n                    className=\"p-button-text\"\n                    onClick={() => {\n                        const newCommandData = {\n                            command: props.command,\n                            description: props.commandDescription,\n                            id: props.commandEditingIdRef.current,\n                        } as CommandEntry;\n                        commandsManagingService\n                            .updateCommand(newCommandData)\n                            .then(() => {\n                                notificationManager.SUCCESS(\n                                    `Successfully updated the command`\n                                );\n                                props.setDialogVisibility(false);\n                                props.commandEditingIdRef.current = -1;\n                            })\n                            .catch((error) => {\n                                notificationManager.ERROR(\n                                    `Couldn't update the command: ${error.message}`\n                                );\n                            });\n                    }}\n                />\n            </>\n        );\n    };\n\n    return (\n        <Dialog\n            visible={props.isDialogVisible}\n            header=\"Edit Command\"\n            modal\n            className=\"p-fluid\"\n            footer={editCommandDialogFooter()}\n            onHide={() => {\n                props.setDialogVisibility(false);\n            }}\n        >\n            <DialogCommandContent\n                command={props.command}\n                commandDescription={props.commandDescription}\n                setCommand={props.setCommand}\n                setCommandDescription={props.setCommandDescription}\n            />\n        </Dialog>\n    );\n}\n","import { Dialog } from 'primereact/dialog';\nimport { Button } from 'primereact/button';\nimport { notificationManager } from '../../../utils/notificationManager';\n\nimport { CommandEntry } from '../../../models/commandModels';\nimport { commandsManagingService } from '../../../services/commandsManagingService';\nimport DialogCommandContent from './DialogCommandContent';\n\ntype AddNewCommandDialogProps = {\n    isDialogVisible: boolean;\n    setDialogVisibility: (visible: boolean) => void;\n    command: string;\n    commandDescription: string;\n    setCommand: (command: string) => void;\n    setCommandDescription: (commandDescription: string) => void;\n};\n\nexport default function AddNewCommandDialog(props: AddNewCommandDialogProps) {\n    const newCommandDialogFooter = (\n        <>\n            <Button\n                label=\"Cancel\"\n                icon=\"pi pi-times\"\n                className=\"p-button-text\"\n                onClick={() => props.setDialogVisibility(false)}\n            />\n            <Button\n                label=\"Save\"\n                icon=\"pi pi-check\"\n                className=\"p-button-text\"\n                onClick={() => {\n                    const newCommand = {\n                        command: props.command,\n                        description: props.commandDescription,\n                    } as CommandEntry;\n                    commandsManagingService\n                        .addNewCommand(newCommand)\n                        .then(() => {\n                            notificationManager.SUCCESS(\n                                `Successfully added new command`\n                            );\n                            props.setDialogVisibility(false);\n                            props.setCommandDescription('');\n                        })\n                        .catch((error) => {\n                            notificationManager.ERROR(\n                                `Couldn't add the command: ${error.message}`\n                            );\n                        });\n                }}\n            />\n        </>\n    );\n\n    return (\n        <Dialog\n            visible={props.isDialogVisible}\n            header=\"Add new command\"\n            modal\n            className=\"p-fluid\"\n            footer={newCommandDialogFooter}\n            onHide={() => props.setDialogVisibility(false)}\n        >\n            <DialogCommandContent\n                setCommandDescription={props.setCommandDescription}\n                commandDescription={props.commandDescription}\n                setCommand={props.setCommand}\n                command={props.command}\n            />\n        </Dialog>\n    );\n}\n","import { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { useRef, useState } from 'react';\nimport { commandsManagingService } from '../../../services/commandsManagingService';\nimport { useSelector } from 'react-redux';\nimport { AppState } from '../../../redux/store';\nimport { CommandEntry } from '../../../models/commandModels';\nimport { Button } from 'primereact/button';\nimport { notificationManager } from '../../../utils/notificationManager';\n\nimport EditCommandDialog from './EditCommandDialog';\nimport { Toolbar } from 'primereact/toolbar';\nimport AddNewCommandDialog from './AddNewCommandDialog';\n\nexport default function CommandsSection() {\n    const isAdmin: boolean = useSelector(\n        (state: AppState) => state.userDataReducer.isAdmin\n    );\n    const commands: CommandEntry[] = useSelector(\n        (state: AppState) => state.commandsReducer.commands\n    );\n    const [commandDescription, setCommandDescription] = useState('');\n    const editingCommandID = useRef(-1);\n    const [command, setCommand] = useState('');\n    const [newCommandDialogVisibiilty, setNewCommandDialogVisibility] =\n        useState(false);\n\n    const [editCommandDialogVisibility, setEditCommandDialogVisibility] =\n        useState(false);\n\n    commandsManagingService.useCommandsLoadingService();\n\n    const commandActionsColumnBody = (rowData: CommandEntry) => {\n        return (\n            <>\n                <Button\n                    data-toggle=\"tooltip\"\n                    title=\"Edits the given command\"\n                    icon=\"pi pi-pencil\"\n                    className=\"p-button-rounded mr-2\"\n                    onClick={() => {\n                        editingCommandID.current = rowData.id;\n                        setEditCommandDialogVisibility(true);\n                        setCommand(rowData.command);\n                        setCommandDescription(rowData.description);\n                    }}\n                />\n                <Button\n                    data-toggle=\"tooltip\"\n                    title=\"Deletes the given command instantly\"\n                    icon=\"pi pi-trash\"\n                    className=\"p-button-rounded p-button-danger\"\n                    onClick={() => {\n                        commandsManagingService\n                            .deleteCommand(rowData)\n                            .then((deletedCommandResponse) => {\n                                notificationManager.SUCCESS(\n                                    `${deletedCommandResponse}`\n                                );\n                                setNewCommandDialogVisibility(false);\n                                setCommandDescription('');\n                            })\n                            .catch((error) => {\n                                notificationManager.ERROR(\n                                    `Couldn't delete the command: ${error}`\n                                );\n                            });\n                    }}\n                />\n            </>\n        );\n    };\n\n    const getToolbarLeftSide = () => {\n        return (\n            <>\n                {isAdmin && (\n                    <Button\n                        label=\"New Command\"\n                        icon=\"pi pi-plus\"\n                        className=\"mr-2\"\n                        data-toggle=\"tooltip\"\n                        title=\"Adds new command\"\n                        onClick={() => setNewCommandDialogVisibility(true)}\n                    ></Button>\n                )}\n            </>\n        );\n    };\n\n    return (\n        <div className=\"section\">\n            <AddNewCommandDialog\n                setCommandDescription={setCommandDescription}\n                commandDescription={commandDescription}\n                setCommand={setCommand}\n                command={command}\n                isDialogVisible={newCommandDialogVisibiilty}\n                setDialogVisibility={setNewCommandDialogVisibility}\n            />\n            <EditCommandDialog\n                setCommandDescription={setCommandDescription}\n                commandDescription={commandDescription}\n                setCommand={setCommand}\n                command={command}\n                commandEditingIdRef={editingCommandID}\n                isDialogVisible={editCommandDialogVisibility}\n                setDialogVisibility={setEditCommandDialogVisibility}\n            />\n\n            {isAdmin && (\n                <Toolbar\n                    className=\"mb-4\"\n                    start={getToolbarLeftSide()}\n                ></Toolbar>\n            )}\n\n            <DataTable\n                value={commands}\n                responsiveLayout=\"scroll\"\n                style={{\n                    backgroundColor: 'transparent',\n                    background: 'transparent',\n                    backdropFilter: 'blur(2px)',\n                }}\n            >\n                <Column field=\"command\" header=\"Command\"></Column>\n                <Column field=\"description\" header=\"Description\"></Column>\n                {isAdmin && (\n                    <Column\n                        header=\"Actions\"\n                        body={commandActionsColumnBody}\n                    ></Column>\n                )}\n            </DataTable>\n        </div>\n    );\n}\n","import './HomePage.css';\nimport ServerInfoSection from './sections/ServerInfoSection';\nimport CommandsSection from './sections/CommandsSection';\nimport { PageWithBackground } from '../PageLayout/PageBackground/PageWithBackground';\nimport { BACKGROUNDS } from '../PageLayout/PageBackground/backgrounds';\n\nexport default function HomePage() {\n    return (\n        <PageWithBackground imageUrl={BACKGROUNDS.BACKGROUND_1}>\n            <div className=\"home-page\">\n                <ServerInfoSection />\n                <CommandsSection />\n            </div>\n        </PageWithBackground>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"pageWithBackground\":\"PageWithBackground_pageWithBackground__nL8hr\"};","import styles from './PageWithBackground.module.css';\nimport React from 'react';\n\nexport type PageWithBackgroundProps = {\n    imageUrl: string;\n} & React.PropsWithChildren;\n\nexport const PageWithBackground = (props: PageWithBackgroundProps) => {\n    return (\n        <div\n            className={styles.pageWithBackground}\n            style={{\n                backgroundImage: `url(${props.imageUrl})`,\n            }}\n        >\n            {props.children}\n        </div>\n    );\n};\n","import background1 from '../../../resources/backgrounds/background_1.jpg';\nimport background2 from '../../../resources/backgrounds/background_2.jpg';\nimport background3 from '../../../resources/backgrounds/background_3.jpg';\nimport background4 from '../../../resources/backgrounds/background_4.jpg';\nimport background5 from '../../../resources/backgrounds/background_5.jpg';\nimport background6 from '../../../resources/backgrounds/background_6.jpg';\n\nimport { Image } from 'primereact/image';\nconst createBackgroundUrl = (imageLoc: Image) => {\n    return `${imageLoc}`;\n};\nexport const BACKGROUNDS = {\n    BACKGROUND_1: createBackgroundUrl(background1),\n    BACKGROUND_2: createBackgroundUrl(background2),\n    BACKGROUND_3: createBackgroundUrl(background3),\n    BACKGROUND_4: createBackgroundUrl(background4),\n    BACKGROUND_5: createBackgroundUrl(background5),\n    BACKGROUND_6: createBackgroundUrl(background6),\n};\n"],"names":["DEFAULT_RETRY_OPTIONS","maxAttempts","initialDelay","maxDelay","backoffMultiplier","retryCondition","isRetryableError","async","retryAsync","operation","options","context","config","lastError","delay","attempt","success","data","attempts","error","appError","createAppError","ErrorType","UNKNOWN","ErrorSeverity","MEDIUM","errorLogger","logErrorWithRetry","onRetry","sleep","Math","min","ms","Promise","resolve","setTimeout","serverInfoService","useServerInfoLoadingService","serverInfo","useSelector","state","serverInfoReducer","isLoading","useRef","useEffect","current","refreshServerInfo","refreshDataInterval","setInterval","API_CONFIG","REFRESH_INTERVAL_MS","clearInterval","actualServerInfo","result","axios","get","API_PATHS","SERVER_INFO","timeout","DEFAULT_TIMEOUT_MS","type","NETWORK","SERVER","code","component","action","newServerInfo","status","Object","keys","length","appStore","dispatch","serverInfoActions","setServerInfo","logError","severity","userMessage","getUserFriendlyMessage","notificationManager","ERROR","offlineServerInfo","name","map","players","maxplayers","bots","playerdetails","withServerInfoErrorBoundary","getFormattedGamePlayTime","useCallback","duration","hrs","mins","secs","ret","getPlayerGameTimeColumnBody","rowData","_jsx","children","getPlayerList","_serverInfo$playerdet","className","_jsxs","DataTable","value","removableSort","sortMode","scrollable","Column","field","header","sortable","body","SERVER_CONFIG","IP","Button","icon","style","scale","verticalAlign","onClick","navigator","clipboard","writeText","SUCCESS","SUCCESS_MESSAGES","COPY_SUCCESS","label","window","location","href","STEAM_CONNECT_URL","display","marginLeft","textDecoration","color","WebkitTextStroke","commandsManagingService","useCommandsLoadingService","useServerCommandsLoader","getCommands","fetch","COMMANDS","method","then","response","ok","Error","json","commandEntries","commandsActions","setCommands","catch","message","addNewCommand","command","headers","JSON","stringify","description","responseData","deleteCommand","id","jsonedResponse","updateCommand","newCommandData","DialogCommandContent","props","_Fragment","InputText","onChange","event","setCommand","target","commandDescription","setCommandDescription","EditCommandDialog","Dialog","visible","isDialogVisible","modal","footer","commandEditingIdRef","setDialogVisibility","onHide","AddNewCommandDialog","newCommandDialogFooter","newCommand","CommandsSection","isAdmin","userDataReducer","commands","commandsReducer","useState","editingCommandID","newCommandDialogVisibiilty","setNewCommandDialogVisibility","editCommandDialogVisibility","setEditCommandDialogVisibility","Toolbar","start","title","responsiveLayout","backgroundColor","background","backdropFilter","deletedCommandResponse","HomePage","PageWithBackground","imageUrl","BACKGROUNDS","BACKGROUND_1","ServerInfoSection","styles","backgroundImage","createBackgroundUrl","imageLoc","background1","BACKGROUND_2","background2","BACKGROUND_3","background3","BACKGROUND_4","background4","BACKGROUND_5","background5","BACKGROUND_6","background6"],"sourceRoot":""}