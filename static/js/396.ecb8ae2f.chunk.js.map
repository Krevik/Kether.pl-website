{"version":3,"file":"static/js/396.ecb8ae2f.chunk.js","mappings":"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","sources":["utils/bindUtils.ts","components/HallOfFame/Dialogues/EditBindDialog.tsx","components/HallOfFame/Dialogues/AddNewBindDialog.tsx","components/HallOfFame/HallOfFame.tsx","components/HallOfFame/Dialogues/DialogBindContent.tsx","services/bindsManagingService.ts","models/bindsModels.ts","webpack://kether.pl/./src/components/PageLayout/PageBackground/PageWithBackground.module.css?73d0","components/PageLayout/PageBackground/PageWithBackground.tsx","components/PageLayout/PageBackground/backgrounds.ts"],"sourcesContent":["import { BindEntry, BindSuggestionEntry } from \"../models/bindsModels\";\n\nexport const trimBindAuthor = (bind: BindEntry | BindSuggestionEntry) => {\n    return {\n        ...bind,\n        author: bind.author.replace(':', '').trim(),\n    };\n};\nexport const bindUtils = {\n    replaceNonEnglishLatinChars: (text: string): string => {\n        const mapping: { [key: string]: string } = {\n            // English equivalents\n            À: 'A',\n            Á: 'A',\n            Â: 'A',\n            Ã: 'A',\n            Ä: 'A',\n            Å: 'A',\n            Ç: 'C',\n            È: 'E',\n            É: 'E',\n            Ê: 'E',\n            Ë: 'E',\n            Ì: 'I',\n            Í: 'I',\n            Î: 'I',\n            Ï: 'I',\n            Ñ: 'N',\n            Ò: 'O',\n            Ô: 'O',\n            Õ: 'O',\n            Ö: 'O',\n            O̧: 'O',\n            Ù: 'U',\n            Ú: 'U',\n            Û: 'U',\n            Ü: 'U',\n            Ý: 'Y',\n            à: 'a',\n            á: 'a',\n            â: 'a',\n            ã: 'a',\n            ä: 'a',\n            å: 'a',\n            ç: 'c',\n            è: 'e',\n            é: 'e',\n            ê: 'e',\n            ë: 'e',\n            ì: 'i',\n            í: 'i',\n            î: 'i',\n            ï: 'i',\n            ñ: 'n',\n            ò: 'o',\n            ô: 'o',\n            õ: 'o',\n            ö: 'o',\n            o̧: 'o',\n            ù: 'u',\n            ú: 'u',\n            û: 'u',\n            ü: 'u',\n            ý: 'y',\n\n            // Polish equivalents\n            Ą: 'A',\n            Ć: 'C',\n            Ę: 'E',\n            Ł: 'L',\n            Ń: 'N',\n            Ó: 'O',\n            Ś: 'S',\n            Ź: 'Z',\n            Ż: 'Z',\n            ą: 'a',\n            ć: 'c',\n            ę: 'e',\n            ł: 'l',\n            ń: 'n',\n            ó: 'o',\n            ś: 's',\n            ź: 'z',\n            ż: 'z',\n        };\n\n        // Normalize text using NFKD, which decomposes characters into base and combining characters\n        const normalizedText = text.normalize('NFKD');\n\n        // Remove any remaining combining characters\n        const strippedText = normalizedText.replace(/[\\u0300-\\u036f]/g, '');\n\n        // Replace characters based on the mapping\n        return strippedText\n            .replace(/[^\\u0000-\\u007F]/g, (char) => mapping[char] || char)\n            .replace(/[:;#*()]/g, '')\n            .replace('^', '')\n            .replace('%', ' procent');\n    },\n};\n","import { Dialog } from 'primereact/dialog';\nimport DialogBindContent from './DialogBindContent';\nimport { Button } from 'primereact/button';\nimport { BindEntry } from '../../../models/bindsModels';\nimport { bindsManagingService } from '../../../services/bindsManagingService';\nimport { notificationManager } from '../../../utils/notificationManager';\nimport { MutableRefObject } from 'react';\n\ntype EditBindDialogProps = {\n    isDialogVisible: boolean;\n    setDialogVisibility: (visible: boolean) => void;\n    bindAuthor: string;\n    bindText: string;\n    setBindAuthor: (author: string) => void;\n    setBindText: (text: string) => void;\n    bindEditingIdRef: MutableRefObject<Number>;\n};\n\nexport default function EditBindDialog(props: EditBindDialogProps) {\n    const editBindDialogFooter = () => {\n        return (\n            <>\n                <Button\n                    label=\"Cancel\"\n                    icon=\"pi pi-times\"\n                    className=\"p-button-text\"\n                    onClick={() => {\n                        props.bindEditingIdRef.current = -1;\n                        props.setDialogVisibility(false);\n                    }}\n                />\n\n                <Button\n                    label=\"Update\"\n                    icon=\"pi pi-check\"\n                    className=\"p-button-text\"\n                    onClick={() => {\n                        const newBindData = {\n                            author: props.bindAuthor,\n                            text: props.bindText,\n                            id: props.bindEditingIdRef.current,\n                        } as BindEntry;\n                        bindsManagingService\n                            .updateBind(newBindData)\n                            .then(() => {\n                                notificationManager.SUCCESS(\n                                    `Successfully updated the bind`\n                                );\n                                props.setDialogVisibility(false);\n                                props.bindEditingIdRef.current = -1;\n                            })\n                            .catch((error) => {\n                                notificationManager.ERROR(\n                                    `Couldn't update the bind: ${error}`\n                                );\n                            });\n                    }}\n                />\n            </>\n        );\n    };\n\n    return (\n        <Dialog\n            visible={props.isDialogVisible}\n            header=\"Edit Bind\"\n            modal\n            className=\"p-fluid\"\n            footer={editBindDialogFooter()}\n            onHide={() => {\n                props.setDialogVisibility(false);\n            }}\n        >\n            <DialogBindContent\n                bindAuthor={props.bindAuthor}\n                bindText={props.bindText}\n                setBindAuthor={props.setBindAuthor}\n                setBindText={props.setBindText}\n            />\n        </Dialog>\n    );\n}\n","import { Dialog } from 'primereact/dialog';\nimport DialogBindContent from './DialogBindContent';\nimport { Button } from 'primereact/button';\nimport { BindEntry } from '../../../models/bindsModels';\nimport { bindsManagingService } from '../../../services/bindsManagingService';\nimport { notificationManager } from '../../../utils/notificationManager';\n\ntype AddNewBindDialogProps = {\n    isDialogVisible: boolean;\n    setDialogVisibility: (visible: boolean) => void;\n    bindAuthor: string;\n    bindText: string;\n    setBindAuthor: (author: string) => void;\n    setBindText: (text: string) => void;\n};\n\nexport default function AddNewBindDialog(props: AddNewBindDialogProps) {\n    const newBindDialogFooter = (\n        <>\n            <Button\n                label=\"Cancel\"\n                icon=\"pi pi-times\"\n                className=\"p-button-text\"\n                onClick={() => props.setDialogVisibility(false)}\n            />\n            <Button\n                label=\"Save\"\n                icon=\"pi pi-check\"\n                className=\"p-button-text\"\n                onClick={() => {\n                    const newBind = {\n                        author: props.bindAuthor,\n                        text: props.bindText,\n                    } as BindEntry;\n                    bindsManagingService\n                        .addNewBind(newBind)\n                        .then(() => {\n                            notificationManager.SUCCESS(\n                                `Successfully added new bind`\n                            );\n                            props.setDialogVisibility(false);\n                            props.setBindText('');\n                        })\n                        .catch((error) => {\n                            notificationManager.ERROR(\n                                `Couldn't add the bind: ${error}`\n                            );\n                        });\n                }}\n            />\n        </>\n    );\n\n    return (\n        <Dialog\n            visible={props.isDialogVisible}\n            header=\"Add new Bind\"\n            modal\n            className=\"p-fluid\"\n            footer={newBindDialogFooter}\n            onHide={() => props.setDialogVisibility(false)}\n        >\n            <DialogBindContent\n                setBindText={props.setBindText}\n                bindText={props.bindText}\n                setBindAuthor={props.setBindAuthor}\n                bindAuthor={props.bindAuthor}\n            />\n        </Dialog>\n    );\n}\n","import { Column } from 'primereact/column';\nimport { DataTable } from 'primereact/datatable';\nimport './HallOfFame.css';\nimport { useSelector } from 'react-redux';\nimport { AppState } from '../../redux/store';\nimport { bindsManagingService } from '../../services/bindsManagingService';\nimport { Button } from 'primereact/button';\nimport {\n    BindEntry,\n    BindSuggestionEntry,\n    BindVote,\n    BindVotingType,\n} from '../../models/bindsModels';\nimport { useRef, useState } from 'react';\nimport { Toolbar } from 'primereact/toolbar';\nimport { notificationManager } from '../../utils/notificationManager';\nimport EditBindDialog from './Dialogues/EditBindDialog';\nimport AddNewBindDialog from './Dialogues/AddNewBindDialog';\nimport { PageWithBackground } from '../PageLayout/PageBackground/PageWithBackground';\nimport { BACKGROUNDS } from '../PageLayout/PageBackground/backgrounds';\nimport { trimBindAuthor } from '../../utils/bindUtils';\n\nconst mapBinds = (binds: BindEntry[] | BindSuggestionEntry[]) => {\n    return binds.map((bind) => {\n        return {\n            ...bind,\n            author: `${bind.author} : `,\n        };\n    });\n};\n\nconst getToolbarLeftSide = (\n    isAdmin: boolean,\n    setNewBindDialogVisibility: (\n        value: boolean | ((prevVar: boolean) => boolean)\n    ) => void\n) => {\n    return (\n        <>\n            {isAdmin && (\n                <Button\n                    label=\"New Bind\"\n                    icon=\"pi pi-plus\"\n                    className=\"p-button-success mr-2\"\n                    data-toggle=\"tooltip\"\n                    title=\"Adds new bind\"\n                    onClick={() => setNewBindDialogVisibility(true)}\n                ></Button>\n            )}\n        </>\n    );\n};\n\nconst bindActionBodyTemplate = (\n    rowData: BindEntry,\n    setEditBindDialogVisibility: (\n        value: boolean | ((prevVar: boolean) => boolean)\n    ) => void,\n    setBindAuthor: (value: string | ((prevVar: string) => string)) => void,\n    setBindText: (value: string | ((prevVar: string) => string)) => void,\n    editingBindID: React.MutableRefObject<number>,\n    userData: any\n) => {\n    return (\n        <>\n            <Button\n                data-toggle=\"tooltip\"\n                title=\"Edits the given bind\"\n                icon=\"pi pi-pencil\"\n                className=\"p-button-rounded p-button-warning mr-2\"\n                onClick={() => {\n                    editingBindID.current = rowData.id;\n                    setEditBindDialogVisibility(true);\n                    setBindAuthor(trimBindAuthor(rowData).author);\n                    setBindText(rowData.text);\n                }}\n            />\n            <Button\n                data-toggle=\"tooltip\"\n                title=\"Deletes the given bind instantly\"\n                icon=\"pi pi-trash\"\n                className=\"p-button-rounded p-button-danger\"\n                onClick={() => {\n                    bindsManagingService\n                        .deleteBind(rowData, userData?.steamid)\n                        .then((deletedBindResponse) => {\n                            notificationManager.SUCCESS(\n                                `${deletedBindResponse}`\n                            );\n                        })\n                        .catch((error) => {\n                            notificationManager.ERROR(\n                                `Couldn't delete the bind: ${error}`\n                            );\n                        });\n                }}\n            />\n        </>\n    );\n};\n\nconst handleVote = (\n    voteIn: BindVotingType,\n    rowData: BindEntry,\n    userData: any,\n    deleteVote?: boolean\n) => {\n    const voteData: BindVote = {\n        voterSteamID: userData?.steamid,\n        votedBindID: rowData.id.toString(),\n        vote: voteIn,\n    };\n    voteData.id = rowData.votingData?.id || undefined;\n    bindsManagingService\n        .setVote(voteData, deleteVote)\n        .then((response) => {\n            notificationManager.SUCCESS(response);\n        })\n        .catch((error) => {\n            notificationManager.ERROR(error);\n        });\n};\n\nconst bindVotingBodyTemplate = (\n    rowData: BindEntry,\n    userData: any\n) => {\n    const selfBindVote: BindVotingType | undefined =\n        rowData.votingData?.selfVote;\n    const selfVoteUpStylingClassName =\n        selfBindVote && selfBindVote === BindVotingType.UPVOTE\n            ? 'self-voted'\n            : '';\n    const selfVoteDownStylingClassName =\n        selfBindVote && selfBindVote === BindVotingType.DOWNVOTE\n            ? 'self-voted'\n            : '';\n    const voteUpButtonStyling = `vote-up-button ${selfVoteUpStylingClassName}`;\n    const voteDownButtonStyling = `vote-down-button ${selfVoteDownStylingClassName}`;\n    return (\n        <>\n            <Button\n                className={voteUpButtonStyling}\n                icon=\"pi pi-thumbs-up\"\n                onClick={() => {\n                    handleVote(\n                        BindVotingType.UPVOTE,\n                        rowData,\n                        userData,\n                        selfBindVote &&\n                            selfBindVote === BindVotingType.UPVOTE\n                    );\n                }}\n            >\n                {rowData.votingData?.Upvotes || 0}\n            </Button>\n            <Button\n                className={voteDownButtonStyling}\n                icon=\"pi pi-thumbs-down\"\n                onClick={() => {\n                    handleVote(\n                        BindVotingType.DOWNVOTE,\n                        rowData,\n                        userData,\n                        selfBindVote &&\n                            selfBindVote === BindVotingType.DOWNVOTE\n                    );\n                }}\n            >\n                {rowData.votingData?.Downvotes || 0}\n            </Button>\n        </>\n    );\n};\n\nexport default function HallOfFame() {\n    const binds = useSelector((state: AppState) => state.bindsReducer.binds);\n\n    const isAdmin: boolean = useSelector(\n        (state: AppState) => state.userDataReducer.isAdmin\n    );\n    const userData = useSelector(\n        (state: AppState) => state.userDataReducer.userData\n    );\n    const userID = useSelector(\n        (state: AppState) => state.userDataReducer.userID\n    );\n\n    const [newBindDialogVisibility, setNewBindDialogVisibility] =\n        useState(false);\n\n    const [editBindDialogVisibility, setEditBindDialogVisibility] =\n        useState(false);\n\n    const [bindAuthor, setBindAuthor] = useState('');\n    const editingBindID = useRef(-1);\n\n    const [bindText, setBindText] = useState('');\n\n    const isLoading = bindsManagingService.useBindsLoadingService(\n        userData?.steamid\n    );\n\n    return (\n        <PageWithBackground imageUrl={BACKGROUNDS.BACKGROUND_2}>\n            <div className=\"hall-of-fame\">\n                <div className=\"card\">\n                    <AddNewBindDialog\n                        setBindText={setBindText}\n                        bindText={bindText}\n                        setBindAuthor={setBindAuthor}\n                        bindAuthor={bindAuthor}\n                        isDialogVisible={newBindDialogVisibility}\n                        setDialogVisibility={setNewBindDialogVisibility}\n                    />\n\n                    <EditBindDialog\n                        setBindText={setBindText}\n                        bindText={bindText}\n                        setBindAuthor={setBindAuthor}\n                        bindAuthor={bindAuthor}\n                        bindEditingIdRef={editingBindID}\n                        isDialogVisible={editBindDialogVisibility}\n                        setDialogVisibility={setEditBindDialogVisibility}\n                    />\n\n                    <Toolbar\n                        className=\"mb-4\"\n                        start={getToolbarLeftSide(\n                            isAdmin,\n                            setNewBindDialogVisibility\n                        )}\n                    ></Toolbar>\n\n                    <div className=\"centered-text\"> Binds</div>\n                    <div className=\"card\">\n                        {isLoading ? (\n                            <p>Loading...</p>\n                        ) : (\n                            <DataTable\n                                value={mapBinds(binds)}\n                                scrollable={true}\n                                scrollHeight=\"flex\"\n                            >\n                                {isAdmin && (\n                                    <Column\n                                        field=\"id\"\n                                        header=\"database ID\"\n                                        sortable\n                                    ></Column>\n                                )}\n                                <Column\n                                    field=\"author\"\n                                    header=\"Author\"\n                                    sortable\n                                ></Column>\n                                <Column\n                                    field=\"text\"\n                                    header=\"Text\"\n                                    sortable\n                                ></Column>\n                                {userID &&\n                                    userData &&\n                                    userData.steamid && (\n                                        <Column\n                                            className=\"voting\"\n                                            header=\"Voting\"\n                                            body={(rowData) =>\n                                                bindVotingBodyTemplate(\n                                                    rowData,\n                                                    userData\n                                                )\n                                            }\n                                        ></Column>\n                                    )}\n                                {isAdmin && (\n                                    <Column\n                                        header=\"Actions\"\n                                        body={(rowData) =>\n                                            bindActionBodyTemplate(\n                                                rowData,\n                                                setEditBindDialogVisibility,\n                                                setBindAuthor,\n                                                setBindText,\n                                                editingBindID,\n                                                userData\n                                            )\n                                        }\n                                    ></Column>\n                                )}\n                            </DataTable>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </PageWithBackground>\n    );\n}\n","import { InputText } from 'primereact/inputtext';\nimport { bindUtils } from '../../../utils/bindUtils';\n\ntype DialogBindContentProps = {\n    bindAuthor: string;\n    bindText: string;\n    setBindAuthor: (author: string) => void;\n    setBindText: (text: string) => void;\n};\n\nexport default function DialogBindContent(props: DialogBindContentProps) {\n    return (\n        <>\n            <h5>Author</h5>\n            <InputText\n                value={bindUtils.replaceNonEnglishLatinChars(props.bindAuthor)}\n                onChange={(event) => props.setBindAuthor(event.target.value)}\n            />\n            <h5>Text</h5>\n            <InputText\n                value={bindUtils.replaceNonEnglishLatinChars(props.bindText)}\n                onChange={(event) => props.setBindText(event.target.value)}\n            />\n        </>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport {\n    AttachedBindVoteData,\n    BindEntry,\n    BindVote,\n    BindVotingType,\n} from '../models/bindsModels';\nimport { AppState, appStore } from '../redux/store';\nimport { bindsActions } from '../redux/slices/bindsSlice';\nimport { apiPaths } from '../utils/apiPaths';\nimport { useSelector } from 'react-redux';\nimport { API_DOMAIN } from '../utils/envUtils';\nimport { notificationManager } from '../utils/notificationManager';\n\n\nexport const bindsManagingService = {\n    useBindsLoadingService: (steamUserID?: string) => {\n        return useServerBindsLoader(steamUserID ? steamUserID : undefined);\n    },\n    getBinds: (userSteamID?: string) => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BINDS_PATH}/getBinds`,\n            {\n                method: 'get',\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((bindEntries: BindEntry[]) => {\n                return getRawBindVotings().then((bindVotings) => {\n                    let selfBindVotes: BindVote[] = [];\n                    if (userSteamID) {\n                        selfBindVotes = bindVotings.filter(\n                            (testBind) => testBind.voterSteamID === userSteamID\n                        );\n                    }\n\n                    const mappedBindVotings: AttachedBindVoteData[] = [];\n                    bindVotings?.forEach((rawBindVoting) => {\n                        const vote: BindVotingType =\n                            rawBindVoting.vote === 'Upvote'\n                                ? BindVotingType.UPVOTE\n                                : BindVotingType.DOWNVOTE;\n                        const upVote: boolean = vote === BindVotingType.UPVOTE;\n                        const downVote: boolean =\n                            vote === BindVotingType.DOWNVOTE;\n                        const existingVotingData = mappedBindVotings.find(\n                            (testBindVote: AttachedBindVoteData) =>\n                                testBindVote.attachedBindID ===\n                                Number(rawBindVoting.votedBindID)\n                        );\n\n                        if (existingVotingData) {\n                            upVote && existingVotingData.Upvotes++;\n                            downVote && existingVotingData.Downvotes++;\n                        } else {\n                            const newVotingData: AttachedBindVoteData = {\n                                id: Number(rawBindVoting.votedBindID),\n                                attachedBindID: Number(\n                                    rawBindVoting.votedBindID\n                                ),\n                                Upvotes: upVote ? 1 : 0,\n                                Downvotes: downVote ? 1 : 0,\n                            };\n                            mappedBindVotings.push(newVotingData);\n                        }\n                    });\n\n                    mappedBindVotings?.forEach(\n                        (mappedBindVoting: AttachedBindVoteData) => {\n                            const bindEntryToAttachTo = bindEntries.find(\n                                (testBindEntry) =>\n                                    testBindEntry.id ===\n                                    mappedBindVoting.attachedBindID\n                            );\n                            if (bindEntryToAttachTo) {\n                                bindEntryToAttachTo.votingData =\n                                    mappedBindVoting;\n                            }\n                        }\n                    );\n\n                    selfBindVotes?.forEach((selfBindVote) => {\n                        const existingBind = bindEntries.find(\n                            (bindEntry) =>\n                                bindEntry.id ===\n                                Number(selfBindVote.votedBindID)\n                        );\n                        if (existingBind) {\n                            existingBind.votingData!.selfVote =\n                                selfBindVote.vote;\n                        }\n                    });\n\n                    appStore.dispatch(bindsActions.setBinds(bindEntries));\n                });\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while fetching binds: ${error.message}`\n                );\n            });\n    },\n    setVote: (votingData: BindVote, undoVote?: boolean): Promise<string> => {\n        const urlSearchParams = new URLSearchParams({\n            voterSteamID: votingData.voterSteamID!,\n            votedBindID: votingData.votedBindID!,\n            vote: votingData.vote!,\n        });\n        votingData.id && urlSearchParams.set('id', votingData.id.toString());\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${\n                apiPaths.BIND_VOTES_PATH\n            }/${undoVote ? 'deleteBindVoting' : 'addBindVoting'}`,\n            {\n                method: 'post',\n                body: urlSearchParams,\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                bindsManagingService.getBinds(votingData.voterSteamID);\n                return response.text();\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while setting vote: ${error.message}`\n                );\n                throw error;\n            });\n    },\n    addNewBind: (bind: BindEntry, steamUserID?: string) => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BINDS_PATH}/addBind`,\n            {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    author: bind.author,\n                    text: bind.text,\n                }),\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                bindsManagingService.getBinds(steamUserID);\n                return response.json();\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while adding new bind: ${error.message}`\n                );\n                throw error;\n            });\n    },\n    deleteBind: (bind: BindEntry, steamUserID?: string) => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BINDS_PATH}/deleteBind`,\n            {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    id: bind.id,\n                }),\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((jsonedResponse) => {\n                bindsManagingService.getBinds(steamUserID);\n                return jsonedResponse.message;\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while deleting bind: ${error.message}`\n                );\n                throw error;\n            });\n    },\n    updateBind: (newBindData: BindEntry, steamUserID?: string) => {\n        return fetch(\n            `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BINDS_PATH}/updateBind`,\n            {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    id: newBindData.id,\n                    author: `${newBindData.author}`,\n                    text: `${newBindData.text}`,\n                }),\n            }\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((jsonedResponse) => {\n                bindsManagingService.getBinds(steamUserID);\n                return jsonedResponse.message;\n            })\n            .catch((error) => {\n                notificationManager.ERROR(\n                    `Error while updating bind: ${error.message}`\n                );\n                throw error;\n            });\n    },\n};\n\nconst getRawBindVotings = (): Promise<BindVote[]> => {\n    return fetch(\n        `${API_DOMAIN}${apiPaths.API_BASE_PATH}${apiPaths.BIND_VOTES_PATH}/getBindVotings`,\n        {\n            method: 'get',\n        }\n    )\n        .then((response) => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .catch((error) => {\n            notificationManager.ERROR(\n                `Error while fetching bind votes: ${error.message}`\n            );\n            return [];\n        });\n};\n\nconst useServerBindsLoader = (steamUserID?: string) => {\n    const userData = useSelector(\n        (state: AppState) => state.userDataReducer.userData\n    );\n    const [isLoading, setIsLoading] = useState(true);\n    useEffect(() => {\n        setIsLoading(true);\n        bindsManagingService.getBinds(steamUserID).finally(() => {\n            setIsLoading(false);\n        });\n    }, [userData, steamUserID]);\n    return isLoading;\n};\n","export type AttachedBindVoteData = {\n    id?: number;\n    attachedBindID: number;\n    Upvotes: number;\n    Downvotes: number;\n    selfVote?: BindVotingType;\n};\n\nexport type BindVote = {\n    id?: number;\n    voterSteamID?: string;\n    votedBindID?: string;\n    vote?: BindVotingType;\n};\n\nexport enum BindVotingType {\n    UPVOTE = 'Upvote',\n    DOWNVOTE = 'Downvote',\n}\n\nexport type BindEntry = {\n    id: number;\n    author: string;\n    text: string;\n    votingData?: AttachedBindVoteData;\n};\n\nexport type BindSuggestionEntry = BindEntry & { proposedBy: string };\n","// extracted by mini-css-extract-plugin\nexport default {\"pageWithBackground\":\"PageWithBackground_pageWithBackground__nL8hr\"};","import styles from './PageWithBackground.module.css';\nimport React from 'react';\n\nexport type PageWithBackgroundProps = {\n    imageUrl: string;\n} & React.PropsWithChildren;\n\nexport const PageWithBackground = (props: PageWithBackgroundProps) => {\n    return (\n        <div\n            className={styles.pageWithBackground}\n            style={{\n                backgroundImage: `url(${props.imageUrl})`,\n            }}\n        >\n            {props.children}\n        </div>\n    );\n};\n","import background1 from '../../../resources/backgrounds/background_1.jpg';\nimport background2 from '../../../resources/backgrounds/background_2.jpg';\nimport background3 from '../../../resources/backgrounds/background_3.jpg';\nimport background4 from '../../../resources/backgrounds/background_4.jpg';\nimport background5 from '../../../resources/backgrounds/background_5.jpg';\nimport background6 from '../../../resources/backgrounds/background_6.jpg';\n\nimport { Image } from 'primereact/image';\nconst createBackgroundUrl = (imageLoc: Image) => {\n    return `${imageLoc}`;\n};\nexport const BACKGROUNDS = {\n    BACKGROUND_1: createBackgroundUrl(background1),\n    BACKGROUND_2: createBackgroundUrl(background2),\n    BACKGROUND_3: createBackgroundUrl(background3),\n    BACKGROUND_4: createBackgroundUrl(background4),\n    BACKGROUND_5: createBackgroundUrl(background5),\n    BACKGROUND_6: createBackgroundUrl(background6),\n};\n"],"names":["trimBindAuthor","bind","author","replace","trim","bindUtils","replaceNonEnglishLatinChars","text","mapping","À","Á","Â","Ã","Ä","Å","Ç","È","É","Ê","Ë","Ì","Í","Î","Ï","Ñ","Ò","Ô","Õ","Ö","O̧","Ù","Ú","Û","Ü","Ý","à","á","â","ã","ä","å","ç","è","é","ê","ë","ì","í","î","ï","ñ","ò","ô","õ","ö","o̧","ù","ú","û","ü","ý","Ą","Ć","Ę","Ł","Ń","Ó","Ś","Ź","Ż","ą","ć","ę","ł","ń","ó","ś","ź","ż","normalize","char","EditBindDialog","props","_jsx","Dialog","visible","isDialogVisible","header","modal","className","footer","_jsxs","_Fragment","children","Button","label","icon","onClick","bindEditingIdRef","current","setDialogVisibility","newBindData","bindAuthor","bindText","id","bindsManagingService","updateBind","then","notificationManager","SUCCESS","catch","error","ERROR","onHide","DialogBindContent","setBindAuthor","setBindText","AddNewBindDialog","newBindDialogFooter","newBind","addNewBind","mapBinds","binds","map","getToolbarLeftSide","isAdmin","setNewBindDialogVisibility","title","bindActionBodyTemplate","rowData","setEditBindDialogVisibility","editingBindID","userData","deleteBind","steamid","deletedBindResponse","handleVote","voteIn","deleteVote","_rowData$votingData","voteData","voterSteamID","votedBindID","toString","vote","votingData","undefined","setVote","response","bindVotingBodyTemplate","_rowData$votingData2","_rowData$votingData3","_rowData$votingData4","selfBindVote","selfVote","voteUpButtonStyling","BindVotingType","UPVOTE","voteDownButtonStyling","DOWNVOTE","Upvotes","Downvotes","HallOfFame","useSelector","state","bindsReducer","userDataReducer","userID","newBindDialogVisibility","useState","editBindDialogVisibility","useRef","isLoading","useBindsLoadingService","PageWithBackground","imageUrl","BACKGROUNDS","BACKGROUND_2","Toolbar","start","DataTable","value","scrollable","scrollHeight","Column","field","sortable","body","InputText","onChange","event","target","steamUserID","useServerBindsLoader","getBinds","userSteamID","fetch","API_DOMAIN","apiPaths","API_BASE_PATH","BINDS_PATH","method","ok","Error","status","json","bindEntries","getRawBindVotings","bindVotings","_selfBindVotes","selfBindVotes","filter","testBind","mappedBindVotings","forEach","rawBindVoting","upVote","downVote","existingVotingData","find","testBindVote","attachedBindID","Number","newVotingData","push","mappedBindVoting","bindEntryToAttachTo","testBindEntry","existingBind","bindEntry","appStore","dispatch","bindsActions","setBinds","message","undoVote","urlSearchParams","URLSearchParams","set","BIND_VOTES_PATH","headers","JSON","stringify","jsonedResponse","setIsLoading","useEffect","finally","styles","style","backgroundImage","createBackgroundUrl","imageLoc","BACKGROUND_1","background1","background2","BACKGROUND_3","background3","BACKGROUND_4","background4","BACKGROUND_5","background5","BACKGROUND_6","background6"],"sourceRoot":""}